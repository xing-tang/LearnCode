package com.open.learncode.算法.leetcode_字节跳动.A0_HR;

public class TM9_按照字符串字符出现的次数重排序 {
//    2、一个是单链表k个一组反转处理
//    5、计算二叉树的宽度
//    7、全排列的下一个数组以及follow up 时间复杂度的优化
//    8、以前缀数这种数据结构为基础对树上的节点进行拓扑排序
//    12、归并去重的
//    16、两个数组取k个数能得到的最大值
//    17、计算矩阵中为1的正方形个数
//    19、字符串中查找目标字符串个数







    // 找零算法
    // 字符串分割反转算法
    // 算法是全排列
    // 用数组实现双头栈
    // 一个数组有1个数字出现了一次,其他数字出现了三次,
    // 二叉搜索树中第K小的元素
    // 删除一个整数数组中value为50的数字，并且返回最终的长度
    // 单链表倒数第k个节点
    // 平衡二叉树判断
    // 死锁
    // LRU怎么实现
    // 排序中稳定和非稳定
    // 快排是稳定还是非稳定
    // 单例模式（手写）
    // Top K问题

//    1、从一堆数里找到只出现1次的数
//    2、一个是单链表k个一组反转处理
//    3、一个是二叉树的右侧视图，就是每层最右侧元素输出
//    4、反转链表、
//    5、计算二叉树的宽度
//    6、递归反转链表
//    7、全排列的下一个数组以及follow up 时间复杂度的优化
//    8、以前缀数这种数据结构为基础对树上的节点进行拓扑排序
//    9、从一组数中取任意连续的一段，求可能的最大值
//    10、链表倒序，按照字符串里面字符出现的次数重排序
//    11、二分搜索的
//    12、归并去重的
//    13、非递归求树深度，
//    14、链表环起点
//    15、双栈实现队列，
//    16、两个数组取k个数能得到的最大值
//    17、计算矩阵中为1的正方形个数
//    18、求数字串第n个字符是啥
//    19、字符串中查找目标字符串个数
//    20、快排


    // 加锁方式
    // Eventbus的优缺点
    // 四大组件启动过程分析
    // android的序列化对象的两种方式
    // Android为什么要让主线程绘制UI呢?
    // Android自定义view需要哪些步骤?要绘制一个正方形的view要怎么办?
    // Android的viewgroup的onlayout函数做了什么?(忘记了)
    // 负载均衡讲下理解
    // http请求一定会到服务器上去吗？(http 304／ 有代理的情况不会)
    // voliate作用于 boolean,Boolean的区别?
    // voliate int a++? 会被立刻看到吗?
    // sync关键字和lock的区别?
    // activity的onNewIntent何时被调用?
    // sharedPreference原理?commit和apply的原理?apply会导致ANR吗？（面试官说apply也会）
    // sharedPreference 可以跨进程吗?(不知道)
    // 重写和重载的区别。
    // HTTP如何实现断点续传的
    // 讲一下jmm。
}
